<?xml version="1.0" encoding="UTF-8"?>
	<!DOCTYPE sqlMap
		PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"
		"http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="admin">
<!-- vo = adminvo  -->


	<!--  select admin 계정  -->
	<select id="selectAdmin" resultClass="adminvo">
		select * from admin
	</select>
	
		<!-- admin 계정 아이디,비밀번호 비교 -->
	<select id ="getAdmin" resultClass="adminvo" parameterClass="adminvo">
    	select * from admin
    	where admin_id=#admin_id# and admin_pw=#admin_pw#
    </select>
	
	
	<select id="getProfessorInfo" parameterClass="provo">
		select * from professor
		where professor pro_id=#pro_id#
	</select>
	
    <insert id="insertProfessor" parameterClass="provo">
    	insert into professor(pro_id,pro_nm,pro_reg,pro_pw,pro_addr,pro_mail,pro_tel,sub_cd,pro_poto,pro_zip)
    	values (#pro_id#, #pro_nm#, #pro_reg#, #pro_pw#, #pro_addr#, #pro_mail#, #pro_tel#,#sub_cd#, #pro_poto#,#pro_zip#)
    </insert>
	
	<delete id="deleteProfessor" parameterClass="String">
		delete from professor where pro_id=#pro_id#
	</delete>
	
	<update id="updateProfessor" parameterClass="provo">
		update professor
			set pro_nm=#pro_nm#,pro_reg=#pro_reg#,pro_pw=#pro_pw#,pro_addr=#pro_addr#,pro_mail=#pro_mail#,
				pro_tel=#pro_tel#,sub_cd=#sub_cd#,pro_zip=#pro_zip#,pro_poto=#pro_poto#
			where pro_id=#pro_id#
	</update>
	<select id="getProfessor" parameterClass="String" resultClass="provo">
			select * from professor
			where pro_id = #pro_id#
	</select>
	
		<select resultClass="classvo" id="getClass"
		parameterClass="String">select * from class where class_no = #class_no#
	</select>
	<update id="UpdateClass" parameterClass="classvo">
		update class set
			rm_no=#rm_no#,
			pro_id=#pro_id#,
			tr_id=#tr_id#,
			s_date=#s_date#,
			e_date=#e_date#,
			cl_fin=#cl_fin#
		where class_no=#class_no#
	</update>

	<insert id="InsertClass" parameterClass="classvo">
		insert into
		class(class_no,rm_no,pro_id,tr_id,s_date,e_date, cl_fin)
		values(#class_no#,#rm_no#,#pro_id#,#tr_id#,#s_date#,#e_date#, 'N')
	</insert>
	
	<select id="getStudent" parameterClass="String" resultClass="stuvo">
	select * from student
		where class_no=#class_no#
	</select>
	
	
	
	<select id="Search" parameterClass="stuvo" resultClass="stuvo">
		select * from student 
		where stu_nm like '%'||#stu_nm#||'%' 
		and class_no=#class_no#
	</select>
	
	
	<select id="getRoom" resultClass="roomvo" >
		select * from room
	</select>
	
	<select id="SearchRoom" parameterClass="String" resultClass="roomvo">
		select * from room
		where rm_type=#rm_type#
	</select>	
	
	
	
	<!-- 채현 -->
	
		<!-- 아이디와 일치하는 학생 불러오기 -->
	<select id="getStudentAd" parameterClass="String" resultClass="stuvo">
			select * from student
			where stu_id = #stu_id#
	</select>
	
	
	<!-- 학생 정보 수정  -->
	<update id="updateStudent" parameterClass="stuvo">
		update student
			set stu_nm=#stu_nm#,
				stu_reg=#stu_reg#,
				stu_pw=#stu_pw#,
				stu_addr=#stu_addr#,
				stu_mail=#stu_mail#,
				stu_tel=#stu_tel#,
				stu_zip=#stu_zip#,
				stu_poto=#stu_poto#,
				stu_fin=#stu_fin#,
				class_no=#class_no#,
				stu_drop=#stu_drop#
			where stu_id=#stu_id#
	</update>
	
	
	<!-- 학생 삭제 -->
	<delete id="deleteStudent" parameterClass="String">
		delete from student where stu_id=#stu_id#
	</delete>
	
	
		<!-- 학생 정보 등록 -->
    <insert id="insertStudent" parameterClass="stuvo">
    	insert into student(stu_id, stu_nm, stu_reg, stu_pw, stu_addr, stu_tel, stu_mail, stu_fin, class_no, stu_drop, stu_zip, stu_poto)
    				 values(#stu_id#, #stu_nm#, #stu_reg#, substr(#stu_reg#, 1, 6), #stu_addr#, #stu_tel#, #stu_mail#, 'N', #class_no#, 'N', #stu_zip#, #stu_poto#)
    </insert>
	
	
	<!-- 신규 교수 번호 -->
	<select id="newproId" resultClass="String">
		SELECT TO_CHAR(MAX(SUBSTR(PRO_ID,4))+1, '000')  from PROFESSOR
	</select>
	
		<!-- 교육과정 리스트 -->
	<select id="trainingAll" resultClass="trvo">
		select * from training
	</select>
	
	<!-- 강의실관리 상엽 -->
		
	<select id="selectRoom" parameterClass="String" resultClass="roomvo">
			select * from room
			where rm_no=#rm_no#
	</select>
	
	<update id="UpdateRoom" parameterClass="roomvo">
		update room
		set rm_type=#rm_type#,useyn=#useyn#
		where rm_no=#rm_no#
	</update>
	
	<select id="selectlecture" resultClass="roomvo">
		select * from room
		where rm_type='강의실' and USEYN ='N'
	</select>
	
	<delete id="deleteClass" parameterClass="String">
				delete from class where class_no=#class_no#	
	</delete>
	
	<!-- 학급이 수료라고 변경하면 강의실 사용여부 N으로 변경 -->
	<update id="FinClassRoomUpdate" parameterClass="roomvo">
		    update room set
            USEYN = #useyn#
            where RM_NO = #rm_no#
	</update>
	
	
	
	
	
	
	<sql id="dynamicCondition">
	   <dynamic prepend=" where ">
	          <isNotEmpty property="rm_type">
	                  rm_type  = #rm_type#
	          </isNotEmpty>
	   </dynamic>
	</sql>
	
	<!-- 강의실 총 갯수 -->
	<select id="roomCount" parameterClass="map" resultClass="int">
		select count(*) from room 
		<include refid="dynamicCondition"/>
	</select>
	
	
	<!-- 강의실 페이징 -->
	<select id="roomListBypage" parameterClass="map" resultClass="roomvo">
		select A.* from 
		(select rownum as rnum , B.* from
	  	  (select * from room 
	  		 <include refid="dynamicCondition"/>
	    		order by RM_NO desc) B
	    	<![CDATA[		
	            where rownum <= #end#) A 
	          where A.rnum >= #start# 
			 ]]> 
	
	</select>
	
	
</sqlMap>